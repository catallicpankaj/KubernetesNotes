Services:
=========
An abstract way to expose an application running on a set of Pods as a network service.
With Kubernetes you don't need to modify your application to use an unfamiliar service discovery mechanism. Kubernetes gives Pods their own IP addresses and a single DNS name for a set of Pods, and can load-balance across them.

Type values and their behaviors are:
=============
ClusterIP:
	 Exposes the Service on a cluster-internal IP. Choosing this value makes the Service only reachable from within the cluster. This is the default ServiceType.
NodePort: 
	Exposes the Service on each Node's IP at a static port (the NodePort). A ClusterIP Service, to which the NodePort Service routes, is automatically created. You'll be able to contact the NodePort Service, from outside the cluster, by requesting <NodeIP>:<NodePort>.
LoadBalancer:
    Exposes the Service externally using a cloud provider's load balancer. NodePort and ClusterIP Services, to which the external load balancer routes, are automatically created.
ExternalName: 
	Maps the Service to the contents of the externalName field (e.g. foo.bar.example.com), by returning a CNAME record with its value. No proxying of any kind is set up.


Service (YAML)
================
apiVersion: v1
kind: Service
metadata:
  name: reactive-app-service
  labels:
    tier: backend
    app: reactive-app-demok8s
spec:
  type: NodePort
  ports:
   - protocol: TCP
     port: 8080
     targetPort: 8080
     nodePort: 30005
  selector:
    tier: backend
    app: reactive-app-demok8s
	 
